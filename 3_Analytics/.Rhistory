reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r); temp <- lapply(1:ncol(r), function(c) cbind(cnames,r[,c])); do.call(rbind,temp)})
reg_data
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
reg_data[[1]]
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r);
temp <- lapply(1:ncol(r), function(c) cbind(cnames,r[,c]))
temp <- do.call(rbind,temp)}; rownames(temp) <- rnames)
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(cnames,r[,c]))
temp <- do.call(rbind,temp); rownames(temp) <- rnames)})
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(cnames,r[,c]))
temp <- do.call(rbind,temp); rownames(temp) <- rnames})
reg_data
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(cnames,r[,c]))
temp <- do.call(rbind,temp); rownames(temp) <- rnames; temp})
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(cnames,r[,c]))
temp <- do.call(rbind,temp); rownames(temp) <- rnames})
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(cnames,r[,c]))
temp <- do.call(rbind,temp); rownames(temp) <- rnames})
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
reg_data[[1]]
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) {temp <- cbind(cnames,r[,c]); rownames(temp) <- rnames})
temp <- do.call(rbind,temp)})
reg_data
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) {temp <- cbind(cnames,r[,c]); rownames(temp) <- rnames; temp})
temp <- do.call(rbind,temp)})
reg_data
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(rnames,cnames,r[,c]))
temp <- do.call(rbind,temp)})
reg_data
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(rnames,cnames,r[,c]))
temp <- do.call(rbind,temp)})
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(rnames,cnames,r[,c]))
temp <- do.call(rbind,temp)})
reg_data
items
length(items)
length(regions)
dim(borders)
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(items[items!=""],cnames,r[,c]))
temp <- do.call(rbind,temp)})
reg_data
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(items[items!=""],cnames,r[,c]))
temp <- do.call(rbind,temp)})
warnings()
items
aa <- items[items!=""]
aa
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
length(reg_data)
reg_data[[1]]
dim(reg_data[[1]])
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(rnames,cnames,r[,c]))
temp <- do.call(rbind,temp)})
reg_data
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(rnames,cnames,r[,c]))
temp <- do.call(rbind,temp)})
reg_data[[1]]
reg_data[[1]]
rownames(reg_data[[1]])
as.numaric(rownames(reg_data[[1]]))
as.numeric(rownames(reg_data[[1]]))
aa <- as.numeric(rownames(reg_data[[1]]))
years
reg_data
reg_data[[1]]
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(rnames,cnames,r[,c]))
temp <- do.call(rbind,temp)})
reg_data
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(rnames,cnames,r[,c]))})
reg_data
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
reg_data
reg_data[[1]]
aa <- matrix(1:25,5)
aa
c(aa)
reg_data[[1]]
t(reg_data[[1]])
c(t(reg_data[[1]]))
t(reg_data[[1]])
colnames(reg_data)
colnames(reg_data[[1]])
sapply(rownames(reg_data[[1]], function(r) sapply(colnames(reg_data[[1]]), function(c) paste0(r,"-",c))
reg_data[[1]]
sapply(rownames(reg_data[[1]], function(r) sapply(colnames(reg_data[[1]]), function(c) paste0(r,"-",c)))
reg_data[[1]]
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]]), function(c) paste0(r,"-",c)))
reg_data[[1]]
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c()
items
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
data
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
data
dim(data)
length(items)
head(items)
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
items
length(items)
!is.na(years)
items <- items[!is.na(years)]
items
items
dim(data)
length(data)
length(items)
cbind(items,data)
items
items==""
items!=""
which(items!="")
borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
borders
<-
items
items    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; items[b[1]:b[2]]})
items
lapply(items, function(i) rep(i[1], length(i))
cbind(items,data)
regions <- regions[!is.na(months)]
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
# reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
# temp <- lapply(1:ncol(r), function(c) cbind(rnames,cnames,r[,c]))})
# temp <- do.call(rbind,temp)})
c(t(reg_data[[1]]))
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]]), function(c) paste0(r,"-",c)))
reg_data[[1]]
lapply(items, function(i) rep(i[1], length(i)))
unlist(lapply(items, function(i) rep(i[1], length(i))))
items    <- unlist(lapply(items, function(i) rep(i[1], length(i))))
data     <- cbind(items,data)
data
regions <- regions[!is.na(months)]
regions
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
borders
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
reg_data
reg_data[[1]]
data
regions
borders
reg_data
names(reg_data) <- regions[regions!=""]
reg_data
reg_data
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]]), function(c) paste0(r,"-",c)))
c(t(reg_data[[1]]))
c(t(reg_data[[1]][,-1]))
sapply(rownames(reg_data[[1]][-1]), function(r) sapply(colnames(reg_data[[1]][-1]), function(c) paste0(r,"-",c)))
colnames(reg_data[[1]])
rownames(reg_data[[1]])
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][-1]), function(c) paste0(r,"-",c)))
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][,-1]), function(c) paste0(r,"-",c)))
t(sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][,-1]), function(c) paste0(r,"-",c))))
c(t(sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][,-1]), function(c) paste0(r,"-",c)))))
c(sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][,-1]), function(c) paste0(r,"-",c))))
c(t(reg_data[[1]][,-1]))
c(t(reg_data[[1]][,-1]))
c(t(reg_data[[1]][,-1]))
c(t(reg_data[[1]][,-1]))
reg_data[[1]]
items
reg_data
reg_data[[1]]
reg_data[[1]]
reg_data[[1]][,1]
!duplicated(reg_data[[1]][,1])
aa <- !duplicated(reg_data[[1]][,1])
aa
which(aa)
items
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
items   <- lapply(1:nrow(item_borders), function(r) {b <- borders[r,]; items[b[1]:b[2]]})
items   <- unlist(lapply(items, function(i) rep(i[1], length(i))))
data    <- cbind(items,data)
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
items   <- lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; items[b[1]:b[2]]})
items   <- unlist(lapply(items, function(i) rep(i[1], length(i))))
data    <- cbind(items,data)
data
regions <- regions[!is.na(months)]
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
reg_data  <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
regions <- regions[!is.na(months)]
regions
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
borders
reg_data  <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
item_borders
item_borders
items   <- lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; items[b[1]:b[2]]})
items
dim(reg_data)
dim(reg_data[[1]])
dim(reg_data[[2]])
dim(reg_data[[3]])
item_borders
items
item_borders
reg_data[[1]]
lapply(1:nrow(item_borders), function(r) {b <- reg_data[[1]][r,]; reg_data[[1]][b[1]:b[2]]})
lapply(1:nrow(item_borders), function(r) {b <- reg_data[[1]][r,]; reg_data[[1]][b[1]:b[2],]})
reg_data
reg_data[[1]]
lapply(1:nrow(item_borders), function(r) {b <- item_borders[[1]][r,]; reg_data[[1]][b[1]:b[2],]})
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
lapply(1:nrow(item_borders), function(r) {b <- item_borders[[1]][r,]; reg_data[[1]][b[1]:b[2],]})
lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
item_borders
[b[1]:b[2],]
b[1]
1:nrow(item_borders)
item_borders
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
regions <- regions[!is.na(months)]
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
reg_data  <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
regdat <- lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
regdat
regdat
colnames(regdat)
regdats <- lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
lapply(regdats, function(regdat) sapply(rownames(regdat), function(r) sapply(colnames(regdat), function(c) paste0(r,"-",c))))
cnames  <- lapply(regdats, function(regdat) c(sapply(rownames(regdat), function(r) sapply(colnames(regdat), function(c) paste0(r,"-",c)))))
cnames
regdats <- lapply(regdats, function(regdat) c(t(regdat)))
regdats
regdats[[1]]
cnames
length(cnames)
lapply(cnames,length)
sapply(cnames,length)
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)
sapply(cnames,length)/12
sapply(cnames,length)
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
cnames[[1]]
save(cnames[[1]],file = "dates.rda")
save(cnames,file = "dates.rda")
out
dates <- save(cnames, file = "dates.rda")
dates
dates <- cnames[[1]]
dates
regdats
install.packages("Rserve")
q()
install.packages("ggplot2")
install.packages("quanteda")
install.packages("XML")
install.packages("XML")
library("XML")
install.packages("quanteda")
install.packages("rmongo")
install.packages("RMongo")
install.packages("RMongo")
q()
setwd("~/Documents/Sentiment/3_Analytics")
library("quanteda")
library("jsonlite")
library("wordcloud")
source("utils_part1.R")
source("utils_part2.R")
source("utils_part3.R")
dat <- fromJSON("../nltk_example/sampletweet.json")
head(dat)
##### Part 1: HASHTAG ANALYSIS ######
#
# Extract hashtags and calculate their TFs
hashtags <- extract_hashtags(dat$Tweet)
head(hashtags)
# Calculate Absolute TFs for each hashtag
absTFs <- calculateAbsTFs(hashtags$hashtag)
absTFs <- absTFs[absTFs$`TF_Abs` >= quantile(absTFs$`TF_Abs`,.99),]
# remove outlier (FIND a better way to do this)
absTFs <- absTFs[-1,]
# Do inner join to match relative TFs of hashtags with the tweets
dat$tweet_key <- as.numeric(rownames(dat))
dat <- merge(dat,hashtags, by="tweet_key")
head(dat)
# Do inner join to match filterout tweets with unnecessary hashtags
dat$hashtag_lower <- tolower(dat$hashtag)
dat <- merge(dat,absTFs, by="hashtag_lower")
head(dat)
# Plot wordcloud
if(require(RColorBrewer)){
pal <- brewer.pal(6,"Dark2")
pal <- pal[-(1)]
# wordcloud(d$word,d$freq,c(8,.3),2,,TRUE,,.15,pal)
#random colors
# wordcloud(d$word,d$freq,c(8,.3),2,,TRUE,TRUE,.15,pal)
wordcloud(absTFs$hashtag_lower,absTFs$TF_Abs,random.order = F,colors = pal)
} else {wordcloud(absTFs$hashtag_lower,absTFs$TF_Abs,random.order = F)}
# Pivot tags to columns
pivot <- pivot_tags_to_columns(dat)
maxs  <- t(apply(pivot, 1, function(r) {r[is.na(r)] <- 0; cumsum(r)}))
mins  <- t(apply(maxs,  1, function(r) c(r[1], head(r,-1))))
library(reshape2)
mins <- melt(mins)
maxs <- melt(maxs)
pivot <- cbind(mins,maxs)
pivot <- pivot[,c(-4,-5)]
colnames(pivot) <- c("Date","Hashtag","Min","Max")
# Plot Theme River for hashtags
# (THE CODE IS COPIED, WE NEED TO CHANGE DUE TO COPYRIGHT ISSUES!!!)
plot_theme_river(pivot)
##### Part 2: BASIC INFLUENCER ANALYSIS ######
library("igraph")
graphVars <- extract_graph_vars(dat)
toptweeters <- graphVars[[2]];  graphVars  <- graphVars[[1]][-4]
actors <- with(graphVars, c(User,Retweet_from))
actors <- actors[!duplicated(actors)]
## Network of top tweeters calculated above
names(graphVars) <- c("from","to","Count")
gr <- graph_from_data_frame(graphVars,T,actors)
plot(gr,edge.arrow.size=.5) # Someone please check whether the graph is correct!
##### Part 3: BASIC NLP ######
dat <- fromJSON("../nltk_example/sampletweet.json")
dat <- cleantweets(dat)
twCorpus <- corpus(dat,text_field = 'Tweet',docid_field = 'User')
summary(twCorpus)
# kwic(twCorpus, "vote")
tweetDFM <- dfm(twCorpus, remove = stopwords("english"),
stem = TRUE, remove_punct = TRUE,
tolower=T)
summary(tweetDFM)
topfeatures(tweetDFM,20)
tweetTFIDF <- tfidf(tweetDFM)
topfeat <- topfeatures(tweetTFIDF,ncol(tweetTFIDF))
topfeat
topfeat <- topfeat[topfeat>quantile(topfeat,.7)]
topfeat
length(topfeat)
topfeat <- topfeat[topfeat>quantile(topfeat,.9)]
aa <- as.data.frame(tweetDFM)
topfeat
length(topfeat)
tweetTFIDF <- as.data.frame(tweetTFIDF)
names(topfeat)
tweetTFIDF <- tweetTFIDF[names(topfeat)]
tweetTFIDF
library("factominer")
library(FactoMineR)
library(factoextra)
pca <- PCA(FactoMineR,ncp = 10,graph = F)
library(FactoMineR)
library(factoextra)
pca <- PCA(FactoMineR,ncp = 10,graph = F)
pca <- PCA(tweetTFIDF,ncp = 10,graph = F)
pca
pca$eig
pca$var
pcavars <- get_pca_var(pca)
pcavars
pcavars$contrib
fviz_screeplot(pca, addlabels = TRUE)
fviz_pca_var(pca, col.var = my.cont.var,
gradient.cols = c("blue", "yellow", "red"),
legend.title = "Cont.Var")
fviz_pca_var(pca, col.var = "black")
tweetTFIDF <- tfidf(tweetDFM)
topfeat <- topfeatures(tweetTFIDF,ncol(tweetTFIDF))
topfeat <- topfeat[topfeat>quantile(topfeat,.9)]
topfeat
tweetTFIDF <- as.data.frame(tweetTFIDF)
topfeat
names(topfeat)
tweetTFIDF <- tweetTFIDF[colnames(tweetTFIDF)%in%names(topfeat)]
tweetTFIDF
library(FactoMineR)
library(factoextra)
pca <- PCA(tweetTFIDF,ncp = 10,graph = F)
pca <- PCA(tweetTFIDF,ncp = 10,graph = T)
pca <- PCA(tweetTFIDF,graph = F)
fviz_eig(pca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(pca, addlabels = TRUE)
pcavars <- get_pca_var(pca)
pcavars$contrib
fviz_pca_var(pca, col.var = "black")
fviz_cos2(res.pca, choice = "var", axes = 1:2)
fviz_cos2(pca, choice = "var", axes = 1:2)
fviz_cos2(pca, choice = "var", axes = 1:2,top = 10)
fviz_cos2(pca, choice = "var", axes = 1:2,top = 50)
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_pca_var(pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
