stringr::str_extract_all(dat$Tweet[1],'#\\w+',simplify = T)
stringr::str_extract_all(dat$Tweet[2],'#\\w+',simplify = T)
stringr::str_extract_all(dat$Tweet[3],'#\\w+',simplify = T)
stringr::str_extract_all(dat$Tweet[4],'#\\w+',simplify = T)
dat$Tweet[4]
lapply(dat$Tweet, function(tw) str_extract_all(tw[4],'#\\w+',simplify = T))
lapply(dat$Tweet[1:10], function(tw) str_extract_all(tw[4],'#\\w+',simplify = T))
lapply(dat$Tweet[1:10], function(tw) str_extract_all(tw,'#\\w+',simplify = T))
lapply(dat$Tweet[11:20], function(tw) str_extract_all(tw,'#\\w+',simplify = T))
lapply(dat$Tweet[11:20], function(tw) str_extract_all(tw,'#\\w+',simplify = F))
lapply(dat$Tweet[11:20], function(tw) str_extract_all(tw,'#\\w+',simplify = T))
lapply(dat$Tweet[21:30], function(tw) str_extract_all(tw,'#\\w+',simplify = T))
hashtags <- lapply(dat$Tweet, function(tw) str_extract_all(tw,'#\\w+',simplify = T))
hashtags[[1]]
hashtags
TFs      <- lapply(hashtags, function(hts) sapply(hts, function(h) 1/length(hts)))
TFs
unlist(hashtags)
length(unlist(hashtags))
length(unlist(TFs))
hashtags <- data.frame(unlist(hashtags),unlist(TFs))
hashtags
hashtags <- lapply(dat$Tweet, function(tw) str_extract_all(tw,'#\\w+',simplify = T))
hashtags
TFs      <- lapply(hashtags, function(hts) sapply(hts, function(h) 1/length(hts)))
TFs
names(TFs) <- 1:length(TFs)
TFs
lapply(TFs, function(tf) rbind(tf,names(tf)))
TFs
unlist(TFs)
TFs      <- unlist(TFs)
TFs
names(TFs)
strsplit(names(TFs),".")
names(TFs)
strsplit(names(TFs),"[.]")
sapply(strsplit(names(TFs),"[.]"), function(tf) tf)
t(sapply(strsplit(names(TFs),"[.]"), function(tf) tf))
TFs      <- data.frame(TFs, t(sapply(strsplit(names(TFs),"[.]"), function(tf) tf)))
TFs
hashtags <- data.frame(TFs, t(sapply(strsplit(names(TFs),"[.]"), function(tf) tf)))
names(hashtags) <- c("TF","tweet_key","hashtag")
head(hashtags)
dat <-jsonlite::fromJSON("nltk_example/sampletweet.json")
source(extract_hashtags)
source("extract_hashtags.R")
setwd("~/Documents/Sentiment/analytics")
source("extract_hashtags.R")
hashtags <- extract_hashtags(dat$tweet)
source('~/Documents/Sentiment/analytics/extract_hashtags.R')
hashtags <- extract_hashtags(dat$tweet)
head(dat$Tweet)
hashtags <- extract_hashtags(dat$Tweet)
head(hashtags)
tweet_list <- dat$Tweet
hashtags <- lapply(tweet_list, function(tw) str_extract_all(tw,'#\\w+',simplify = T))
hashtags
TFs      <- lapply(hashtags, function(hts) sapply(hts, function(h) 1/length(hts)))
TFs      <- unlist(TFs)
TFs
hashtags <- data.frame(TFs, t(sapply(strsplit(names(TFs),"[.]"), function(tf) tf)))
hashtags
head(hashtags)
head(TFs)
hashtags <- lapply(tweet_list, function(tw) str_extract_all(tw,'#\\w+',simplify = T))
head(hashtags)
TFs      <- lapply(hashtags, function(hts) sapply(hts, function(h) 1/length(hts)))
head(TFs)
TFs      <- unlist(TFs)
head(TFs)
names(TFs) <- 1:length(TFs)
TFs      <- unlist(TFs)
TFs
hashtags <- lapply(tweet_list, function(tw) str_extract_all(tw,'#\\w+',simplify = T))
TFs      <- lapply(hashtags, function(hts) sapply(hts, function(h) 1/length(hts)))
names(TFs) <- 1:length(TFs)
TFs      <- unlist(TFs)
hashtags <- data.frame(TFs, t(sapply(strsplit(names(TFs),"[.]"), function(tf) tf)))
head(hashtags)
head(hashtags,10)
source('~/Documents/Sentiment/analytics/extract_hashtags.R')
hashtags <- extract_hashtags(dat$Tweet)
head(hashtags)
table(hashtags$hashtag)
fd <- table(hashtags$hashtag)
fd <- data.frame(fd)
fd
hashtags$hashtag
fd <- table(sapply(hashtags$hashtag, tolower))
fd
fd <- data.frame(fd)
fd
colnames(fd) <- ['hashtag_lower','TF Rel']
colnames(fd) <- c('hashtag_lower','TF Rel')
fd           <- fd[order(fd[,2]),]
fd
head(fd)
tail(fd)
fd <- table(sapply(hashtags$hashtag, tolower))
fd <- data.frame(fd)
colnames(fd) <- c('hashtag_lower','TF Rel')
fd           <- fd[order(fd[,2],decreasing = T),]
head(fd)
hashtags$hashtag
source('~/Documents/Sentiment/analytics/calcRelTFs.R')
relTFs <- calculateRelTFs(hashtags$hashtag)
relTFs
hist(relTFs)
hist(relTFs$`TF Rel`)
hist(relTFs$`TF Rel`[1:100])
summary(relTFs$`TF Rel`)
quantile(relTFs$`TF Rel`)
quantile(relTFs$`TF Rel`,.75)
relTFs$hashtag_lower
relTFs$`TF Rel`
relTFs <- relTFs[relTFs$`TF Rel` >= quantile(relTFs$`TF Rel`,.75),]
relTFs
quantile(relTFs$`TF Rel`,.75)
quantile(relTFs$`TF Rel`,.95)
relTFs <- calculateRelTFs(hashtags$hashtag)
relTFs[relTFs$`TF Rel` >= quantile(relTFs$`TF Rel`,.95),]
relTFs <- relTFs[relTFs$`TF Rel` >= quantile(relTFs$`TF Rel`,.95),]
relTFs
head(relTFs)
hist(relTFs)
hist(relTFs$`TF Rel`)
hashtags <- extract_hashtags(dat$Tweet)
head(hashtags)
relTFs <- calculateRelTFs(hashtags$hashtag)
relTFs <- relTFs[relTFs$`TF Rel` >= quantile(relTFs$`TF Rel`,.99),]
relTFs
relTFs <- calculateRelTFs(hashtags$hashtag)
relTFs <- relTFs[relTFs$`TF Rel` >= quantile(relTFs$`TF Rel`,.99),]
relTFs <- calculateRelTFs(hashtags$hashtag)
relTFs <- relTFs[-1,]
relTFs
relTFs[relTFs$`TF Rel` >= quantile(relTFs$`TF Rel`,.99),]
relTFs <- relTFs[relTFs$`TF Rel` >= quantile(relTFs$`TF Rel`,.99),]
relTFs
relTFs <- calculateRelTFs(hashtags$hashtag)
relTFs <- relTFs[relTFs$`TF Rel` >= quantile(relTFs$`TF Rel`,.99),]
relTFs
relTFs <- relTFs[-1,]
source('~/Documents/Sentiment/analytics/calcRelTFs.R')
relTFs <- calculateAbsTFs(hashtags$hashtag)
relTFs <- relTFs[relTFs$`TF Rel` >= quantile(relTFs$`TF_Abs`,.99),]
relTFs <- relTFs[-1,]
relTFs
relTFs <- calculateAbsTFs(hashtags$hashtag)
relTFs <- relTFs[relTFs$`TF Rel` >= quantile(relTFs$`TF_Abs`,.99),]
relTFs
relTFs <- calculateAbsTFs(hashtags$hashtag)
relTFs
relTFs <- relTFs[relTFs$`TF_Abs` >= quantile(relTFs$`TF_Abs`,.99),]
relTFs
relTFs <- relTFs[-1,]
relTFs
absTFs <- calculateAbsTFs(hashtags$hashtag)
absTFs <- absTFs[absTFs$`TF_Abs` >= quantile(absTFs$`TF_Abs`,.99),]
absTFs
absTFs <- absTFs[-1,]
absTFs
head(hashtags)
head(dat)
head(hashtags)
dat$tweet_key <- rownames(dat)
dat$tweet_key
dat$tweet_key <- as.numeric(rownames(dat))
dat$tweet_key
aa <- merge(dat,hashtags, by="tweet_key")
head(aa)
dim(aa)
dim(dat)
dim(hashtags)
dat <- merge(dat,hashtags, by="tweet_key")
rm(aa)
absTFs
head(dat)
dat$hashtag_lower <- tolower(dat$hashtag)
dat$hashtag_lower
dat <- merge(dat,absTFs, by="hashtag_lower")
dat
head(dat)
dim(dat)
dat$hashtag_lower
head(dat)
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
wordcloud::wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
(c(letters, LETTERS, 0:9))
head(dat)
absTFs
head(dat)
wordcloud::wordcloud(absTFs$hashtag_lower,absTFs$TF_Abs)
temp <- dat[,10:11]
temp
temp <- temp[!duplicated(temp$hashtag),]
wordcloud::wordcloud(temp$hashtag,temp$TF_Abs)
wordcloud::wordcloud(absTFs$hashtag_lower,absTFs$TF_Abs)
dat$Time
dat$Time
class(dat$Time)
class(dat$Time[1])
dat$Time
substr(dat$Time,1,10)
dat$Date <- as.Date(substr(dat$Time,1,10))
dat$Date
aggregate(hashtag_lower ~ Date, dat, count)
aggregate(hashtag_lower ~ Date, dat, sum)
aggregate(hashtag_lower ~ Date, dat, NROW)
htags <- dat$hashtag_lower[!duplicated(dat$hashtag_lower)]
htags
sapply(htags, function(ht) aggregate(hashtag_lower ~ Date, subset(dat, hashtag_lower == ht), NROW))
lapply(htags, function(ht) aggregate(hashtag_lower ~ Date, subset(dat, hashtag_lower == ht), NROW))
counts   <- lapply(htags, function(ht) aggregate(hashtag_lower ~ Date, subset(dat, hashtag_lower == ht), NROW))
counts
dates    <- unlist(lapply(counts, function(c) c$Date))
dates
dates    <- unlist(lapply(counts, function(c) as.character(c$Date)))
dates
dates    <- dates[!duplicated(dates)]
dates
dates    <- as.Date(dates[!duplicated(dates)])
dates
dates    <- sort(dates)
dates
counts
counts[[1]]
counts[[1]]$hashtag_lower
counts[[1]]$Date
match(counts[[1]]$Date,dates)
match(dates,counts[[1]]$Date)
counts[[1]]$hashtag_lower[match(dates,counts[[1]]$Date)]
sapply(counts, function(c) c$hashtag_lower[match(dates,c$Date))
htags = input_table[['Time','hashtag']]
dates = pd.to_datetime(htags['Time'])
htags['Time'] = [d.date().isoformat() for d in dates]
htags['Count'] = htags.groupby(['Time'])['hashtag'].transform('count')
htags = htags.drop_duplicates()
htags = htags.pivot('Time','hashtag','Count')
output_table = htags
sapply(counts, function(c) c$hashtag_lower[match(dates,c$Date)])
counts   <- sapply(counts, function(c) c$hashtag_lower[match(dates,c$Date)])
rownames(counts) <- dates
rownames(counts)
rownames(counts) <- as.character(dates)
counts
colnames(counts) <- htags
counts
pivot_tags_to_columns <- function(dat){
dat$Date <- as.Date(substr(dat$Time,1,10))
htags    <- dat$hashtag_lower[!duplicated(dat$hashtag_lower)]
counts   <- lapply(htags, function(ht) aggregate(hashtag_lower ~ Date, subset(dat, hashtag_lower == ht), NROW))
dates    <- unlist(lapply(counts, function(c) as.character(c$Date)))
dates    <- sort(as.Date(dates[!duplicated(dates)]))
counts   <- sapply(counts, function(c) c$hashtag_lower[match(dates,c$Date)])
rownames(counts) <- as.character(dates)
colnames(counts) <- htags
counts
}
pivot <- pivot_tags_to_columns(dat)
pivot
pivot[1,]
cumsum(pivot[1,])
aa <- pivot[1,]
aa[aa==NA] <- 0
cumsum(aa)
aa <- pivot[1,]
aa[aa==NA] <- 0
cumsum(aa)
aa[aa==NA]
pivot <- pivot_tags_to_columns(dat)
aa <- pivot[1,]
aa
aa[aa==NA]
aa[is.na(aa)] <- 0
cumsum(aa)
maxs  <- apply(pivot, 1, function(r) {r[is.na(r)] <- 0; cumsum(r)})
maxs
maxs  <- t(apply(pivot, 1, function(r) {r[is.na(r)] <- 0; cumsum(r)}))
maxs
mins  <- t(apply(maxs,  1, function(r) c(r[1], head(r,-1))))
mins
melt(mins)
reshape2::melt(mins)
library(reshape2)
mins <- melt(mins)
maxs <- melt(maxs)
maxs
cbind(mins,maxs)
pivt <- cbind(mins,maxs)
pivt <- pivt[c(-4,5)]
pivt <- pivt[,c(-4,-5)]
pivt
colnames(pivt) <- c("Date","Hashtag","Min","Max")
source('~/Documents/Sentiment/analytics/plot_theme_river.R')
ggplot(data = dat) + ribbons + legend + labels
ribbons = geom_ribbon(aes(Date, ymin=Min, ymax=Max, group = Hashtag, color = Hashtag, fill = Hashtag))
legend = guides( fill = guide_legend(reverse=TRUE), color = guide_legend(reverse=TRUE))
ggplot(data = dat) + ribbons + legend + labels
source('~/Documents/Sentiment/analytics/plot_theme_river.R')
library(ggplot2)
length(palette)
clean_theme = theme(panel.background = element_blank(),
plot.title = element_text(size=20, face="bold", colour = "black"),
panel.border = element_rect(color = "black", linetype = "solid", fill = "transparent"),
axis.title.x = element_blank(),
axis.title = element_text(size=14, face="italic", colour = "black"),
axis.text = element_text(size=12, face="italic", colour = "black"),
axis.text.y = element_blank(),
legend.text = element_text(size=12, face="italic", colour = "black"),
panel.grid = element_blank()
)
legend = guides( fill = guide_legend(reverse=TRUE), color = guide_legend(reverse=TRUE))
ribbons = geom_ribbon(aes(Date, ymin=Min, ymax=Max, group = Hashtag, color = Hashtag, fill = Hashtag))
labels = labs(y = "Tweet Volume")
ggplot(data = dat) + ribbons + legend + labels
ggplot(data = pivt) + ribbons + legend + labels
length(palette)
fill + lines ++ clean_theme
ggplot(data = pivt) + ribbons + legend + labels + fill + lines ++ clean_theme
fill = scale_fill_manual(values=palette)
lines = scale_colour_manual(values=palette)
ggplot(data = pivt) + ribbons + legend + labels + fill + lines ++ clean_theme
ggplot(data = pivt) + ribbons + legend + labels + fill + lines + clean_theme
ggplot(data = pivt) + ribbons + legend + labels + fill + lines + clean_theme
source('~/Documents/Sentiment/analytics/tweet_analytics.R')
source("plot_theme_river.R")
source('~/Documents/Sentiment/analytics/plot_theme_river.R')
library(ggplot2)
clean_theme = theme(panel.background = element_blank(),
plot.title = element_text(size=20, face="bold", colour = "black"),
panel.border = element_rect(color = "black", linetype = "solid", fill = "transparent"),
axis.title.x = element_blank(),
axis.title = element_text(size=14, face="italic", colour = "black"),
axis.text = element_text(size=12, face="italic", colour = "black"),
axis.text.y = element_blank(),
legend.text = element_text(size=12, face="italic", colour = "black"),
panel.grid = element_blank()
)
#fill = scale_fill_manual(values=palette)
legend = guides( fill = guide_legend(reverse=TRUE), color = guide_legend(reverse=TRUE))
#lines = scale_colour_manual(values=palette)
ribbons = geom_ribbon(aes(Date, ymin=Min, ymax=Max, group = Hashtag, color = Hashtag, fill = Hashtag))
labels = labs(y = "Tweet Volume")
ggplot(data = pivt) + ribbons + legend + labels
#fill + lines ++ clean_theme
source('~/Documents/Sentiment/analytics/plot_theme_river.R')
plot_theme_river(pivt)
head(dat)
dim(dat)
head(dat)
head(is.na(dat$Retweet_from))
dd <- dat[is.na(dat$Retweet_from)]
dd <- dat[is.na(dat$Retweet_from),]
dd
retweeteds <- dat[is.na(dat$Retweet_from),]
rm(dd)
head(retweeteds)
retweeteds <- retweeteds[,names(retweeteds) %in% 'Time','Retweet_from','User']
retweeteds <- retweeteds[,names(retweeteds) %in% c('Time','Retweet_from','User')]
retweeteds
head(retweeteds)
retweeteds <- dat[is.na(dat$Retweet_from),]
head(retweeteds)
head(dat)
retweeteds <- dat[!is.na(dat$Retweet_from),]
retweeteds <- retweeteds[,names(retweeteds) %in% c('Time','Retweet_from','User')]
head(retweeteds)
aggregate(User ~ Retweet_from, retweeteds, NROW)
aggregate(User ~ Retweet_from + User, retweeteds, NROW)
aggregate(cbind(User,Retweet_from) ~ Retweet_from, retweeteds, NROW)
retweeteds
aggregate(Time ~ Retweet_from + User, retweeteds, NROW)
graphVars <- aggregate(Time ~ Retweet_from + User, retweeteds, NROW)
toptweeters <- dat[names(dat) %in% c('Retweeted','User'),]
toptweeters
toptweeters <- dat[,names(dat) %in% c('Retweeted','User')]
toptweeters
aggregate(User ~ Retweeted, toptweeters,sum)
aggregate(Retweeted ~ User, toptweeters,sum)
toptweeters <- aggregate(Retweeted ~ User, toptweeters,sum)
toptweeters
graphVars
toptweeters$Retweeted
toptweeters[order(toptweeters$Retweeted,decreasing = T),]
aa<- toptweeters[order(toptweeters$Retweeted,decreasing = T),]
duplicated(aa[,1])
tail(duplicated(aa[,1]))
tail(duplicated(aa[,1]),100)
toptweeters <- toptweeters[order(toptweeters$Retweeted,decreasing = T),]
rm(aa)
toptweeters[1:40,]
graphVars
toptweeters
toptweeters <- toptweeters[1:40,] # Top 40 but WHY???
toptweeters
merge(graphVars,toptweeters,by="User")
graphVars   <- merge(graphVars,toptweeters,by="User")
colnames(graphVars)[3] <- "Count"
graphVars
source('~/Documents/Sentiment/analytics/toptweeters.R')
graphVars <- extract_graph_vars(dat)
graphVars
library(igraph)
graphVars
gr <- graph_from_data_frame(graphVars,T,graphVars$User)
aa <- c(graphVars$User,graphVars$Retweet_from)
aa <- aa[!duplicated]
aa <- aa[!duplicated(aa)]
aa
gr <- graph_from_data_frame(graphVars,T,aa)
plot(gr)
graphVars
reshape2::recast(graphVars, User ~ Retweet_from)
french_fries
recast(french_fries, time ~ variable, id.var = 1:4)
reshape2::recast(graphVars, Retweet_from ~ User)
reshape2::recast(graphVars, User ~ Retweet_from)
aa <- reshape2::recast(graphVars, User ~ Retweet_from)
aa[,1]
graphVars$User
aa <- reshape2::recast(graphVars, User ~ Retweet_from,)
aa <- reshape2::recast(graphVars, User ~ Retweet_from)
reshape2::recast(graphVars, User ~ Retweet_from)
reshape2::dcast(graphVars, User ~ Retweet_from)
reshape2::dcast(graphVars, User ~ Retweet_from,sum)
reshape2::dcast(graphVars, User ~ Retweet_from,sum,value.var = Count)
reshape2::dcast(graphVars, User ~ Retweet_from,sum,value.var = "Count")
graphVars[,1]
rownames(graphVars) <- graphVars[,1]
rownames(graphVars) <- graphVars[,1]
graphVars[,1]
graphVars <- extract_graph_vars(dat)
graphVars <- reshape2::dcast(graphVars, User ~ Retweet_from,sum,value.var = "Count")
rownames(graphVars) <- graphVars[,1]
graphVars
graphVars <- graphVars[,-1]
graphVars
graphVars
graph.adjacency(graphVars,'direct3ed',T,F)
graph.adjacency(graphVars,'directed',T,F)
graph.adjacency(graphVars,,T,F)
graph.adjacency(graphVars,,F,F)
graph_from_adjacency_matrix(graphVars,,'directed',F)
graph_from_adjacency_matrix(graphVars,'directed','directed',F)
graph_from_adjacency_matrix(graphVars,'directed','directed')
graphVars <- extract_graph_vars(dat)
graphVars <- reshape2::dcast(graphVars, User ~ Retweet_from,sum,value.var = "Count")
rownames(graphVars) <- graphVars[,1]
graphVars <- as.matrix(graphVars[,-1])
graphVars
graph_from_adjacency_matrix(graphVars,"directed",F)
graph_from_adjacency_matrix(graphVars,"directed")
graph_from_adjacency_matrix(graphVars,"directed","directed")
graph_from_adjacency_matrix(graphVars,"directed",T)
graphVars
dim(graphVars)
graphVars <- extract_graph_vars(dat)
graphVars <- reshape2::dcast(graphVars, User ~ Retweet_from,sum,value.var = "Count",drop = F)
graphVars
dim(graphVars)
graphVars <- reshape2::dcast(graphVars, User ~ Retweet_from,sum,value.var = "Count")
graphVars <- extract_graph_vars(dat)
graphVars <- reshape2::dcast(graphVars, User ~ Retweet_from,sum,value.var = "Count")
rownames(graphVars) <- graphVars[,1]
graphVars <- as.matrix(graphVars[,-1])
graphVars
usernames <- rownames(graphVars); tweeteds <- colnames(graphVars)
tweeteds
addbelow  <- matrix(0,length(tweeteds),ncol(graphVars))
addbelow
addbelow  <- matrix(0,length(tweeteds),ncol(graphVars)); rownames(addbelow) <- tweeteds
graphVars <- rbind(graphVars, addbelow)
graphVars
rownames(graphvars)
rownames(graphVars)
duplicated(rownames(graphVars))
graphVars <- rbind(graphVars, addbelow); graphVars <- graphVars[!duplicated(rownames(graphVars)),]
graphVars
length(usernames)
addright  <- matrix(0,nrow(graphVars),length(usernames)); colnames(addright) <- usernames
addright
colnames(graphVars)
!duplicated(colnames(graphVars))
graphVars <- cbind(graphVars, addright); graphVars <- graphVars[,!duplicated(colnames(graphVars))]
graphVars
dim(graphVars)
graph_from_adjacency_matrix(graphVars,"directed",T)
gr <- graph_from_adjacency_matrix(graphVars,"directed",T)
plot(gr)
plot(gr)
graphVars <- extract_graph_vars(dat)
graphVars
graphVars <- extract_graph_vars(dat)[-4]
graphVars
actors <- with(graphVars, c(Users,Retweet_from))
actors <- with(graphVars, c(User,Retweet_from))
actors
actors <- actors[!duplicated(actors)]
actors
graph_from_data_frame(graphVars,T,actors)
gr2 <- graph_from_data_frame(graphVars,T,actors)
plot(gr2)
graphVars
gr3 <- graphVars[,c(2,1,3)]
gr3 <- graph_from_data_frame(gr3,T,actors)
gr3
plot(gr3)
names(graphVars) <- c("from","to","Count")
gr3 <- graph_from_data_frame(graphVars,T,actors)
plot(gr3)
